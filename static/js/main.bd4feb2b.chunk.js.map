{"version":3,"sources":["icons.png","setup.png","helper.png","power.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Step","props","className","image","alt","src","title","description","Button","href","url","style","backgroundColor","color","target","rel","text","App","logo","maxWidth","setup","helper","power","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,yNCOrCC,G,MAAO,SAACC,GACZ,OACI,yBAAKC,UAAW,QACTD,EAAME,MAAO,yBAAKC,IAAK,+BAAgCC,IAAKJ,EAAME,QAAU,KAC7E,4BAAKF,EAAMK,OACX,6BACCL,EAAMM,eAKbC,EAAS,SAACP,GACZ,OAAO,uBAAGQ,KAAMR,EAAMS,IAAKC,MAAO,CAACC,gBAAgBX,EAAMY,OAAQC,OAAQ,SAAUC,IAAK,uBAAwBd,EAAMe,OAiJ3GC,MA9If,WACE,OACE,yBAAKf,UAAU,OACb,yBAAKG,IAAKa,IAAMd,IAAK,iBAAkBO,MAAO,CAACQ,SAAS,OACxD,+CAEE,kBAAC,EAAD,CACEhB,MAAOiB,IACPd,MAAO,yBACPC,YACI,6BACI,6CACA,6GACA,kBAAC,EAAD,CAAQG,IAAK,oEAAqEM,KAAM,4BACxF,6BACA,0CACA,+MACA,kDACA,gHAEI,6BAAK,6BACL,mGACA,6BACA,mEAEJ,2CACA,8KAEI,6BAAK,6BACL,8FACA,6BAAK,6BAJT,6CAK8C,wDAC1C,6BAAK,6BANT,2EAO4E,qCAP5E,uGASA,6BACA,sDACA,iLAKV,kBAAC,EAAD,CACEb,MAAOkB,IACPf,MAAO,4BACPC,YACI,6BACI,oJACA,iDACA,iHACA,kBAAC,EAAD,CAAQG,IAAK,oEAAqEM,KAAM,kCACxF,6BAEA,wDACA,0UAGI,uBAAGd,UAAW,OAAQO,KAAM,qLAC5BK,OAAQ,SAAUC,IAAK,uBADvB,2EAGJ,kBAAC,EAAD,CAAQL,IAAK,oEAAqEM,KAAM,+BACxF,6BAEA,mDACA,yIACA,kBAAC,EAAD,CAAQN,IAAK,oEAAqEM,KAAM,iCACxF,6BAEA,gDACA,0LACA,kBAAC,EAAD,CAAQN,IAAK,oEAAqEM,KAAM,kCAMlG,kBAAC,EAAD,CACIb,MAAOmB,IACPhB,MAAO,oBACPC,YACI,6BACI,kEACA,kBAAC,EAAD,CAAQG,IAAK,oEACLM,KAAM,0BACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,yBACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,yBACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,0BACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,uBACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,yBACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,2BACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,6BACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,6BACNH,MAAO,YAEf,kBAAC,EAAD,CAAQH,IAAK,oEACLM,KAAM,8BACNH,MAAO,eAM3B,kBAAC,EAAD,CACIV,MAAO,KACPG,MAAO,sBACPC,YACI,6BACI,yIACA,iGACA,oJC/IAgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd4feb2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.cf75d966.png\";","module.exports = __webpack_public_path__ + \"static/media/setup.7555cc06.png\";","module.exports = __webpack_public_path__ + \"static/media/helper.3d9c9bb2.png\";","module.exports = __webpack_public_path__ + \"static/media/power.0b09c3bd.png\";","import React from 'react';\nimport logo from './icons.png';\nimport setup from './setup.png';\nimport helper from './helper.png';\nimport power from './power.png';\nimport './App.css';\n\nconst Step = (props) =>{\n  return(\n      <div className={\"step\"}>\n            {props.image? <img alt={\"Thumbnail for setup shortcut\"} src={props.image}/> :null}\n            <h2>{props.title}</h2>\n            <hr/>\n            {props.description}\n      </div>\n  )\n}\n\nconst Button = (props) =>{\n    return <a href={props.url} style={{backgroundColor:props.color}} target={\"_blank\"} rel={\"noopener noreferrer\"}>{props.text}</a>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img src={logo} alt={\"shortcut Logos\"} style={{maxWidth:500}}/>\n      <h1>Bravia Controls</h1>\n\n        <Step\n          image={setup}\n          title={\"Setup TV for Shortcuts\"}\n          description={\n              <div>\n                  <h3>On Your Phone</h3>\n                  <p>First we'll download and run a shortcut to create a config file in your phone.</p>\n                  <Button url={\"https://www.icloud.com/shortcuts/3ebc473b23ee47aca3ae504cd2b7534c\"} text={\"Download Setup Shortcut\"}/>\n                  <hr/>\n                  <h3>On Your TV</h3>\n                  <p>In your tv, we will need to access some network settings. So go to the android home and then head onto the settings panel. From there you'll need to go to the following places:</p>\n                  <h4>Your Television IP</h4>\n                  <p>\n                      This is just the IP of your television within your network. You should find it at:\n                      <br/><br/>\n                      <i>Settings > Network > Advanced Settings > Network Status > IP Address</i>\n                      <br/>\n                      <h6>It usually starts with 192.168....</h6>\n                  </p>\n                  <h4>Setup a PSK</h4>\n                  <p>\n                      A PSK, or a Pre-Shared Key, is sort of a password between your television and other things trying to control it. To setup one you need to go to:\n                      <br/><br/>\n                      <i>Settings > Network > Home network > IP Control > Authentication</i>\n                      <br/><br/>\n                      Then inside Authentication we will select <i>Normal and Pre-Shared Key</i>\n                      <br/><br/>\n                      And then inside Pre-Shared Key, you will create one. Since only devices <b>inside</b> your network will be able to use this, it doesn't have to be super complex. I personally use 1234.\n                  </p>\n                  <hr/>\n                  <h3>Now Back On Your Phone</h3>\n                  <p>Run the shortcut we downloaded previously. It will ask you for both the IP and the PSK and save that information in a local file in your phone.</p>\n              </div>\n          }\n        />\n\n        <Step\n          image={helper}\n          title={\"Download Helper Shortcuts\"}\n          description={\n              <div>\n                  <p>These are all required shortcuts for everything to work. You won't necessarily run them, but they make things easier.</p>\n                  <h3>View Config Setup</h3>\n                  <p>Ok, this one is optional. It just shows you the IP and PSK you entered previously.</p>\n                  <Button url={\"https://www.icloud.com/shortcuts/7026079addf6450e936039314bdbc90d\"} text={\"Download View Config Shortcut\"}/>\n                  <hr/>\n\n                  <h3>Commands JSON/Dictionary</h3>\n                  <p>Things get a little more programmy here. This shortcut holds the most common commands available for use.\n                      The commands are essentially a combination of a capitalized Key Name (Play, Pause..) and a string of letters (the IRCC Commands). If you'd like to add more commands,\n                      I recommend checking out this\n                      <a className={\"link\"} href={\"https://www.reddit.com/r/HomePod/comments/9p37ws/control_sony_tv_power_offon_via_hey_siri_on_your/?utm_source=reddit&utm_medium=usertext&utm_name=shortcuts&utm_content=t1_fzeu46g\"}\n                      target={\"_blank\"} rel={\"noopener noreferrer\"}\n                      > reddit post that contains an extensive list of all commands available</a></p>\n                  <Button url={\"https://www.icloud.com/shortcuts/f35c9b1be1544144ad4e07993862551b\"} text={\"Download Commands Shortcut\"}/>\n                  <hr/>\n\n                  <h3>Back to Springboard</h3>\n                  <p>This isn't mine, but it works well for us. It just takes you back to the home page after a command is run.</p>\n                  <Button url={\"https://www.icloud.com/shortcuts/9cc28d884a5149f4b0b297f78fce13e1\"} text={\"Download Back to Springboard\"}/>\n                  <hr/>\n\n                  <h3>Run IRCC Command</h3>\n                  <p>This one grabs a key from the previous shortcut based on the provided key and sends it to the TV with the IP from the config using the PSK from the config.</p>\n                  <Button url={\"https://www.icloud.com/shortcuts/3ec9554536674ea7abda1d48caff60ea\"} text={\"Download Run IRCC Shortcut\"}/>\n\n              </div>\n          }\n        />\n\n        <Step\n            image={power}\n            title={\"Download Commands\"}\n            description={\n                <div>\n                    <p>These are the commands you can run.</p>\n                    <Button url={\"https://www.icloud.com/shortcuts/c500d523f8884173a4a267f4671e67d7\"}\n                            text={\"Download Power Shortcut\"}\n                            color={\"#06d1b1\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/dd37036d350c42868ebba8f5d2d17ca7\"}\n                            text={\"Download Home Shortcut\"}\n                            color={\"#8350bf\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/9772c4edd0384d1a8c49aa73156ce356\"}\n                            text={\"Download Play Shortcut\"}\n                            color={\"#73c972\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/25944a0d8a2d4a4a83402cf82a284364\"}\n                            text={\"Download Pause Shortcut\"}\n                            color={\"#73c972\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/6deb35576a2945f79c5585945193bce0\"}\n                            text={\"Download OK Shortcut\"}\n                            color={\"#ee8567\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/3d362b7ca09c44db823eb8f2d17a0fa0\"}\n                            text={\"Download Back Shortcut\"}\n                            color={\"#56b4f1\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/1c53fada1e6446a5ae60324fb50bd2dc\"}\n                            text={\"Download Up Btn Shortcut\"}\n                            color={\"#ebaf69\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/eb904a9cb14d48d5bee736826c94191c\"}\n                            text={\"Download Down Btn Shortcut\"}\n                            color={\"#ebaf69\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/3e4abfa208284e18adb3335530e109a4\"}\n                            text={\"Download Left Btn Shortcut\"}\n                            color={\"#ebaf69\"}\n                    />\n                    <Button url={\"https://www.icloud.com/shortcuts/70a89013b0684625b268a60b47efada5\"}\n                            text={\"Download Right Btn Shortcut\"}\n                            color={\"#ebaf69\"}\n                    />\n                </div>\n            }\n        />\n\n        <Step\n            image={null}\n            title={\"Current Limitations\"}\n            description={\n                <div>\n                    <p>You won't be able to setup multiple tvs on the same phone. It should be doable though, I just didn't do it</p>\n                    <p>You have to be connected to the same network as the tv, of course.</p>\n                    <p>It looks like running commands right after the other some times doesn't work. Not sure this can be fixed though.</p>\n                </div>\n            }\n        />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}